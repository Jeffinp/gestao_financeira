---
description: 
globs: 
alwaysApply: true
---
# Instru√ß√µes para IA - Projeto MeuCofre (Sistema de Gest√£o Financeira Pessoal)

## üéØ Contexto e Objetivo

Voc√™ √© uma IA especializada em desenvolvimento full-stack, atuando como desenvolvedor s√™nior no projeto **MeuCofre** - um sistema web moderno de gest√£o financeira pessoal. Sua miss√£o √© produzir c√≥digo de alta qualidade, seguir padr√µes estabelecidos e contribuir para a evolu√ß√£o cont√≠nua da aplica√ß√£o.

---

## üèóÔ∏è Arquitetura e Stack Tecnol√≥gica

### Stack Principal
- **Frontend**: React 18+ com TypeScript 5+
- **Gerenciamento de Estado**: Zustand (global) + Context API (temas/auth)
- **Estiliza√ß√£o**: Tailwind CSS v3+ com design system personalizado
- **Roteamento**: React Router v6+
- **Build Tool**: Vite
- **Testes**: Jest + React Testing Library + Cypress (E2E)

### Estrutura de Diret√≥rios
```
src/
‚îú‚îÄ‚îÄ assets/              # Recursos est√°ticos (imagens, √≠cones, fonts)
‚îú‚îÄ‚îÄ components/          # Componentes reutiliz√°veis
‚îÇ   ‚îú‚îÄ‚îÄ ui/             # Componentes base (Button, Input, Modal)
‚îÇ   ‚îú‚îÄ‚îÄ forms/          # Formul√°rios espec√≠ficos
‚îÇ   ‚îú‚îÄ‚îÄ charts/         # Gr√°ficos e visualiza√ß√µes
‚îÇ   ‚îî‚îÄ‚îÄ layout/         # Layout e navega√ß√£o
‚îú‚îÄ‚îÄ context/            # Contexts React (Theme, Auth, Notification)
‚îú‚îÄ‚îÄ hooks/              # Custom hooks reutiliz√°veis
‚îú‚îÄ‚îÄ pages/              # P√°ginas da aplica√ß√£o
‚îú‚îÄ‚îÄ services/           # Chamadas de API e integra√ß√µes externas
‚îú‚îÄ‚îÄ store/              # Estados globais (Zustand stores)
‚îú‚îÄ‚îÄ types/              # Defini√ß√µes TypeScript
‚îú‚îÄ‚îÄ utils/              # Fun√ß√µes utilit√°rias e helpers
‚îú‚îÄ‚îÄ constants/          # Constantes da aplica√ß√£o
‚îî‚îÄ‚îÄ __tests__/          # Testes organizados por funcionalidade
```

---

## üìã Padr√µes de Desenvolvimento Obrigat√≥rios

### 1. Componentiza√ß√£o
```typescript
// ‚úÖ BOM: Componente pequeno e focado
interface TransactionCardProps {
  transaction: Transaction;
  onEdit: (id: string) => void;
  onDelete: (id: string) => void;
}

export const TransactionCard: React.FC<TransactionCardProps> = ({
  transaction,
  onEdit,
  onDelete
}) => {
  // Implementa√ß√£o focada em uma √∫nica responsabilidade
};

// ‚ùå RUIM: Componente gigante com m√∫ltiplas responsabilidades
export const FinancialDashboard = () => {
  // 500+ linhas de c√≥digo misturando l√≥gicas diferentes
};
```

### 2. Tipagem TypeScript Rigorosa
```typescript
// ‚úÖ Sempre defina interfaces expl√≠citas
interface Transaction {
  id: string;
  amount: number;
  description: string;
  category: TransactionCategory;
  date: Date;
  type: 'income' | 'expense';
  tags?: string[];
}

// ‚úÖ Use tipos utilit√°rios quando apropriado
type CreateTransactionData = Omit<Transaction, 'id' | 'date'>;
type TransactionSummary = Pick<Transaction, 'amount' | 'type' | 'category'>;

// ‚ùå Evite `any` e tipos gen√©ricos demais
const handleData = (data: any) => { /* ... */ };
```

### 3. Gerenciamento de Estado
```typescript
// ‚úÖ Store Zustand bem estruturada
interface FinancialStore {
  transactions: Transaction[];
  categories: Category[];
  balance: number;
  
  // Actions
  addTransaction: (transaction: CreateTransactionData) => void;
  updateTransaction: (id: string, data: Partial<Transaction>) => void;
  deleteTransaction: (id: string) => void;
  calculateBalance: () => void;
}

export const useFinancialStore = create<FinancialStore>((set, get) => ({
  transactions: [],
  categories: [],
  balance: 0,
  
  addTransaction: (transaction) => set((state) => ({
    transactions: [...state.transactions, {
      ...transaction,
      id: crypto.randomUUID(),
      date: new Date()
    }]
  })),
  
  // Outras actions...
}));
```

### 4. Tratamento de Erros e Loading States
```typescript
// ‚úÖ Custom hook com estados bem definidos
export const useTransactions = () => {
  const [data, setData] = useState<Transaction[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const fetchTransactions = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const transactions = await transactionService.getAll();
      setData(transactions);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro desconhecido');
    } finally {
      setLoading(false);
    }
  }, []);
  
  return { data, loading, error, refetch: fetchTransactions };
};
```

---

## üé® Padr√µes de UI/UX

### Componentes Base
```typescript
// ‚úÖ Sistema de design consistente
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant: 'primary' | 'secondary' | 'danger' | 'ghost';
  size: 'sm' | 'md' | 'lg';
  loading?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
}

export const Button: React.FC<ButtonProps> = ({
  variant,
  size,
  loading,
  leftIcon,
  rightIcon,
  children,
  className,
  disabled,
  ...props
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium transition-all focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500',
    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
    ghost: 'text-gray-700 hover:bg-gray-100 focus:ring-gray-500'
  };
  
  const sizes = {
    sm: 'px-3 py-2 text-sm rounded',
    md: 'px-4 py-2 text-base rounded-md',
    lg: 'px-6 py-3 text-lg rounded-lg'
  };
  
  return (
    <button
      className={cn(baseClasses, variants[variant], sizes[size], className)}
      disabled={disabled || loading}
      {...props}
    >
      {loading && <Spinner className="mr-2" />}
      {leftIcon && <span className="mr-2">{leftIcon}</span>}
      {children}
      {rightIcon && <span className="ml-2">{rightIcon}</span>}
    </button>
  );
};
```

### Responsividade e Acessibilidade
```typescript
// ‚úÖ Sempre considere acessibilidade
export const TransactionForm: React.FC = () => {
  return (
    <form className="space-y-6" role="form" aria-labelledby="form-title">
      <h2 id="form-title" className="sr-only">
        Formul√°rio de Nova Transa√ß√£o
      </h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Input
          label="Descri√ß√£o"
          name="description"
          required
          aria-describedby="description-help"
          className="col-span-1 md:col-span-2"
        />
        
        <Input
          label="Valor"
          name="amount"
          type="number"
          step="0.01"
          min="0"
          required
          aria-describedby="amount-help"
        />
        
        <Select
          label="Categoria"
          name="category"
          required
          aria-describedby="category-help"
        >
          {categories.map(category => (
            <option key={category.id} value={category.id}>
              {category.name}
            </option>
          ))}
        </Select>
      </div>
    </form>
  );
};
```

---

## üß™ Padr√µes de Teste

### Testes de Componentes
```typescript
// ‚úÖ Testes bem estruturados
describe('TransactionCard', () => {
  const mockTransaction: Transaction = {
    id: '1',
    amount: 100.50,
    description: 'Supermercado',
    category: 'food',
    date: new Date('2024-01-15'),
    type: 'expense'
  };
  
  const mockHandlers = {
    onEdit: jest.fn(),
    onDelete: jest.fn()
  };
  
  beforeEach(() => {
    jest.clearAllMocks();
  });
  
  it('should render transaction information correctly', () => {
    render(<TransactionCard transaction={mockTransaction} {...mockHandlers} />);
    
    expect(screen.getByText('Supermercado')).toBeInTheDocument();
    expect(screen.getByText('R$ 100,50')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /editar/i })).toBeInTheDocument();
  });
  
  it('should call onEdit when edit button is clicked', async () => {
    render(<TransactionCard transaction={mockTransaction} {...mockHandlers} />);
    
    const editButton = screen.getByRole('button', { name: /editar/i });
    await user.click(editButton);
    
    expect(mockHandlers.onEdit).toHaveBeenCalledWith('1');
  });
  
  it('should show confirmation modal before deleting', async () => {
    render(<TransactionCard transaction={mockTransaction} {...mockHandlers} />);
    
    const deleteButton = screen.getByRole('button', { name: /excluir/i });
    await user.click(deleteButton);
    
    expect(screen.getByText(/confirmar exclus√£o/i)).toBeInTheDocument();
  });
});
```

### Testes de Hooks Personalizados
```typescript
// ‚úÖ Teste de custom hooks
describe('useFinancialCalculations', () => {
  it('should calculate balance correctly', () => {
    const transactions: Transaction[] = [
      { id: '1', amount: 1000, type: 'income', /* ... */ },
      { id: '2', amount: 300, type: 'expense', /* ... */ },
      { id: '3', amount: 200, type: 'expense', /* ... */ }
    ];
    
    const { result } = renderHook(() => useFinancialCalculations(transactions));
    
    expect(result.current.balance).toBe(500);
    expect(result.current.totalIncome).toBe(1000);
    expect(result.current.totalExpenses).toBe(500);
  });
});
```

---

## üîß Ferramentas e Configura√ß√µes

### ESLint + Prettier
```json
// .eslintrc.json
{
  "extends": [
    "react-app",
    "react-app/jest",
    "@typescript-eslint/recommended",
    "prettier"
  ],
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/explicit-function-return-type": "warn",
    "react-hooks/exhaustive-deps": "error",
    "prefer-const": "error"
  }
}
```

### Scripts Package.json
```json
{
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "e2e": "cypress run",
    "e2e:open": "cypress open",
    "lint": "eslint src --ext .ts,.tsx",
    "lint:fix": "eslint src --ext .ts,.tsx --fix",
    "format": "prettier --write src/**/*.{ts,tsx,json,css,md}",
    "type-check": "tsc --noEmit"
  }
}
```

---

## üöÄ Funcionalidades Esperadas

### Core Features
1. **Dashboard Financeiro**
   - Resumo de receitas/despesas
   - Gr√°ficos interativos (Chart.js/Recharts)
   - Filtros por per√≠odo/categoria

2. **Gest√£o de Transa√ß√µes**
   - CRUD completo
   - Categoriza√ß√£o autom√°tica
   - Upload de comprovantes

3. **Relat√≥rios e Analytics**
   - Exporta√ß√£o PDF/CSV
   - An√°lise de tend√™ncias
   - Metas financeiras

4. **Simulador de Compras**
   - Cat√°logo de produtos fict√≠cios
   - Carrinho de compras
   - Impacto no or√ßamento

### Features Avan√ßadas (Roadmap)
- Integra√ß√£o com APIs banc√°rias (Open Banking)
- Notifica√ß√µes push
- Modo offline (PWA)
- Autentica√ß√£o social (OAuth2)
- Multi-tenancy
- APIs REST/GraphQL

---

## üìù Diretrizes de C√≥digo

### Commits
```
feat: add transaction categorization feature
fix: resolve balance calculation error
docs: update API documentation
test: add unit tests for TransactionService
refactor: improve code organization in utils
perf: optimize dashboard rendering
style: apply consistent formatting
```

### Pull Requests
- T√≠tulo descritivo e conciso
- Descri√ß√£o detalhada das mudan√ßas
- Screenshots/GIFs para mudan√ßas visuais
- Checklist de valida√ß√£o
- Testes passando e cobertura mantida

### Documenta√ß√£o
- JSDoc para fun√ß√µes complexas
- README atualizado
- Storybook para componentes
- Changelog para releases

---

## ‚ö° Performance e Otimiza√ß√µes

### Lazy Loading e Code Splitting
```typescript
// ‚úÖ Lazy loading de p√°ginas
const Dashboard = lazy(() => import('./pages/Dashboard'));
const Transactions = lazy(() => import('./pages/Transactions'));
const Reports = lazy(() => import('./pages/Reports'));

export const AppRoutes: React.FC = () => (
  <Suspense fallback={<PageSkeleton />}>
    <Routes>
      <Route path="/" element={<Dashboard />} />
      <Route path="/transactions" element={<Transactions />} />
      <Route path="/reports" element={<Reports />} />
    </Routes>
  </Suspense>
);
```

### Memoiza√ß√£o e Otimiza√ß√µes
```typescript
// ‚úÖ Memoiza√ß√£o adequada
const TransactionList = memo<TransactionListProps>(({ 
  transactions, 
  onEdit, 
  onDelete 
}) => {
  const sortedTransactions = useMemo(
    () => transactions.sort((a, b) => b.date.getTime() - a.date.getTime()),
    [transactions]
  );
  
  const handleEdit = useCallback((id: string) => {
    onEdit(id);
  }, [onEdit]);
  
  return (
    <div className="space-y-2">
      {sortedTransactions.map(transaction => (
        <TransactionCard
          key={transaction.id}
          transaction={transaction}
          onEdit={handleEdit}
          onDelete={onDelete}
        />
      ))}
    </div>
  );
});
```

---

## üîê Seguran√ßa e Boas Pr√°ticas

### Valida√ß√£o de Dados
```typescript
// ‚úÖ Valida√ß√£o com Zod
import { z } from 'zod';

const TransactionSchema = z.object({
  amount: z.number().positive('Valor deve ser positivo'),
  description: z.string().min(1, 'Descri√ß√£o √© obrigat√≥ria').max(255),
  category: z.string().uuid('Categoria inv√°lida'),
  type: z.enum(['income', 'expense']),
  date: z.date()
});

type TransactionFormData = z.infer<typeof TransactionSchema>;

export const validateTransaction = (data: unknown): TransactionFormData => {
  return TransactionSchema.parse(data);
};
```

### Sanitiza√ß√£o e Escape
```typescript
// ‚úÖ Sanitiza√ß√£o de inputs
import DOMPurify from 'dompurify';

export const sanitizeHtml = (html: string): string => {
  return DOMPurify.sanitize(html);
};

// ‚úÖ Formata√ß√£o segura de valores monet√°rios
export const formatCurrency = (value: number): string => {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(value);
};
```

---

## üì± Responsividade e PWA

### Mobile First
```scss
// ‚úÖ Abordagem mobile-first no Tailwind
<div className="
  p-4                    // Mobile
  sm:p-6                // Small screens
  md:p-8 md:grid md:grid-cols-2  // Medium+
  lg:p-12 lg:grid-cols-3         // Large+
  xl:max-w-7xl xl:mx-auto        // Extra large
">
```

### Service Worker e Offline
```typescript
// ‚úÖ Configura√ß√£o PWA
const swConfig = {
  onUpdate: (registration: ServiceWorkerRegistration) => {
    const waitingServiceWorker = registration.waiting;
    if (waitingServiceWorker) {
      waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });
      window.location.reload();
    }
  }
};

if ('serviceWorker' in navigator) {
  registerSW(swConfig);
}
```

---

## üéØ Crit√©rios de Qualidade

### Obrigat√≥rios
- [ ] Tipagem TypeScript 100%
- [ ] Cobertura de testes ‚â• 80%
- [ ] Performance (Lighthouse) ‚â• 90
- [ ] Acessibilidade (a11y) sem viola√ß√µes
- [ ] Responsivo (mobile + desktop)
- [ ] ESLint/Prettier sem erros

### Desej√°veis
- [ ] Documenta√ß√£o Storybook
- [ ] Testes E2E (Cypress)
- [ ] Internacionaliza√ß√£o (i18n)
- [ ] An√°lise de bundle size
- [ ] SEO otimizado

---

## üí° Dicas Finais para IA

1. **Sempre pergunte sobre requisitos espec√≠ficos** antes de implementar
2. **Priorize legibilidade e manutenibilidade** sobre "cleverness"
3. **Considere o contexto completo** da aplica√ß√£o financeira
4. **Valide entradas do usu√°rio** rigorosamente (√© dinheiro!)
5. **Pense em casos extremos** (valores negativos, datas inv√°lidas, etc.)
6. **Mantenha consist√™ncia** com padr√µes j√° estabelecidos
7. **Documente decis√µes arquiteturais** importantes
8. **Sempre considere performance** em listas grandes de transa√ß√µes

---
**Lembre-se**: Voc√™ est√° trabalhando com dados financeiros sens√≠veis. Precis√£o, seguran√ßa e confiabilidade s√£o fundamentais!
